<Window x:Class="JsonConfigEditor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:JsonConfigEditor.ViewModels"
        xmlns:views="clr-namespace:JsonConfigEditor.Views"
        xmlns:converters="clr-namespace:JsonConfigEditor.Wpf.Converters"
        xmlns:ap="clr-namespace:JsonConfigEditor.Wpf.AttachedProperties"
        xmlns:local="clr-namespace:JsonConfigEditor"
        Title="{Binding WindowTitle}" 
        Height="600" Width="1000"
        WindowStartupLocation="CenterScreen">
    
    <Window.DataContext>
        <vm:MainViewModel />
    </Window.DataContext>
    
    <Window.InputBindings>
        <!-- Keyboard shortcuts -->
        <KeyBinding Key="O" Modifiers="Ctrl" Command="{Binding OpenFileCommand}" />
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding SaveFileCommand}" />
        <KeyBinding Key="N" Modifiers="Ctrl" Command="{Binding NewFileCommand}" />
        <KeyBinding Key="F" Modifiers="Ctrl" Command="{Binding FocusSearchCommand}" />
        <KeyBinding Key="F3" Command="{Binding FindNextCommand}" />
        <KeyBinding Key="F3" Modifiers="Shift" Command="{Binding FindPreviousCommand}" />
        <KeyBinding Key="Delete" Command="{Binding DeleteSelectedNodesCommand}" CommandParameter="{Binding SelectedGridItem}"/>
    </Window.InputBindings>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Wpf/Resources/ModalEditors.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <converters:CustomTooltipConverter x:Key="CustomTooltipConverter" />
            <converters:BooleanToStringConverter x:Key="BooleanToStringConverter" />

            <DataTemplate x:Key="DisplayStringTemplate">
                <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayNumberTemplate">
                <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" HorizontalAlignment="Left" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayBooleanTemplate">
                <CheckBox IsChecked="{Binding ValueDisplay, Converter={StaticResource BooleanToStringConverter}, Mode=OneWay}" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Left" />
            </DataTemplate>
            
            <DataTemplate x:Key="DisplayEnumTemplate">
                 <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayRefTemplate">
                 <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" FontStyle="Italic" Foreground="Blue" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayAddItemTemplate">
                 <TextBlock Text="{Binding NodeName}" VerticalAlignment="Center" Margin="2,0" FontStyle="Italic" Foreground="Gray" />
            </DataTemplate>
            
            <DataTemplate x:Key="DisplaySchemaOnlyTemplate">
                 <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" FontStyle="Italic" Foreground="DarkGray" />
            </DataTemplate>

            <DataTemplate x:Key="EditStringTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditNumberTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" HorizontalAlignment="Left" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditBooleanTemplate">
                <CheckBox IsChecked="{Binding EditValue, Converter={StaticResource BooleanToStringConverter}, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" HorizontalAlignment="Left"
                          ap:FocusAndSelect.IsEnabled="True"/>
            </DataTemplate>
            
            <DataTemplate x:Key="EditEnumTemplate">
                <ComboBox ItemsSource="{Binding SchemaContextNode.AllowedValues}" 
                          SelectedItem="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" 
                          IsEditable="False" VerticalAlignment="Center"/>
            </DataTemplate>

            <DataTemplate x:Key="EditRefTemplate">
                 <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                          ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditAddItemTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditSchemaOnlyTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>
            
            <views:NodeValueTemplateSelector x:Key="NodeValueTemplateSelector" 
                ModalEditorButtonTemplate="{StaticResource ModalEditorButtonTemplate}"
                DisplayStringTemplate="{StaticResource DisplayStringTemplate}"
                DisplayNumberTemplate="{StaticResource DisplayNumberTemplate}"
                DisplayBooleanTemplate="{StaticResource DisplayBooleanTemplate}"
                DisplayEnumTemplate="{StaticResource DisplayEnumTemplate}"
                DisplayRefTemplate="{StaticResource DisplayRefTemplate}"
                DisplayAddItemTemplate="{StaticResource DisplayAddItemTemplate}"
                DisplaySchemaOnlyTemplate="{StaticResource DisplaySchemaOnlyTemplate}"
                EditStringTemplate="{StaticResource EditStringTemplate}"
                EditNumberTemplate="{StaticResource EditNumberTemplate}"
                EditBooleanTemplate="{StaticResource EditBooleanTemplate}"
                EditEnumTemplate="{StaticResource EditEnumTemplate}"
                EditRefTemplate="{StaticResource EditRefTemplate}"
                EditAddItemTemplate="{StaticResource EditAddItemTemplate}"
                EditSchemaOnlyTemplate="{StaticResource EditSchemaOnlyTemplate}" />
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Menu Bar -->
        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_New" Command="{Binding NewFileCommand}" InputGestureText="Ctrl+N" />
                <MenuItem Header="_Open..." Command="{Binding OpenFileCommand}" InputGestureText="Ctrl+O" />
                <Separator />
                <MenuItem Header="_Save" Command="{Binding SaveFileCommand}" InputGestureText="Ctrl+S" />
                <MenuItem Header="Save _As..." Command="{Binding SaveAsFileCommand}" />
                <Separator />
                <MenuItem Header="E_xit" Command="{Binding ExitCommand}" />
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Undo" Command="{Binding UndoCommand}" InputGestureText="Ctrl+Z" />
                <MenuItem Header="_Redo" Command="{Binding RedoCommand}" InputGestureText="Ctrl+Y" />
                <Separator />
                <MenuItem Header="_Find" Command="{Binding FocusSearchCommand}" InputGestureText="Ctrl+F" />
                <MenuItem Header="Find _Next" Command="{Binding FindNextCommand}" InputGestureText="F3" />
                <MenuItem Header="Find _Previous" Command="{Binding FindPreviousCommand}" InputGestureText="Shift+F3" />
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="Show _Schema Nodes" IsCheckable="True" IsChecked="{Binding ShowSchemaNodes}" />
                <MenuItem Header="Show Only _Invalid Nodes" IsCheckable="True" IsChecked="{Binding ShowOnlyInvalidNodes}" />
            </MenuItem>
            <MenuItem Header="_Schema">
                <MenuItem Header="_Load Schema Assembly..." Command="{Binding LoadSchemaCommand}" />
            </MenuItem>
        </Menu>

        <!-- Toolbar -->
        <ToolBar Grid.Row="1">
            <Button Command="{Binding NewFileCommand}" ToolTip="New (Ctrl+N)">
                <TextBlock Text="📄" FontSize="16" />
            </Button>
            <Button Command="{Binding OpenFileCommand}" ToolTip="Open (Ctrl+O)">
                <TextBlock Text="📂" FontSize="16" />
            </Button>
            <Button Command="{Binding SaveFileCommand}" ToolTip="Save (Ctrl+S)">
                <TextBlock Text="💾" FontSize="16" />
            </Button>
            <Separator />
            <Button Command="{Binding UndoCommand}" ToolTip="Undo (Ctrl+Z)">
                <TextBlock Text="↶" FontSize="16" />
            </Button>
            <Button Command="{Binding RedoCommand}" ToolTip="Redo (Ctrl+Y)">
                <TextBlock Text="↷" FontSize="16" />
            </Button>
            <Separator />
            
            <!-- Filter Controls -->
            <TextBlock Text="Filter:" VerticalAlignment="Center" Margin="5,0" />
            <TextBox Text="{Binding FilterText, UpdateSourceTrigger=PropertyChanged}" 
                     Width="150" ToolTip="Filter nodes by name" />
            <Button Command="{Binding ClearFilterCommand}" 
                    IsEnabled="{Binding CanClearFilter}"
                    ToolTip="Clear filter">
                <TextBlock Text="❌" Foreground="Red" FontWeight="Bold" />
            </Button>
            
            <Separator />
            
            <!-- Search Controls -->
            <TextBlock Text="Search:" VerticalAlignment="Center" Margin="5,0" />
            <TextBox x:Name="SearchTextBox" 
                     Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" 
                     Width="150" ToolTip="Search nodes (Ctrl+F)" />
            <Button Command="{Binding FindNextCommand}" ToolTip="Find Next (F3)">
                <TextBlock Text="⬇" FontSize="12" />
            </Button>
            <Button Command="{Binding FindPreviousCommand}" ToolTip="Find Previous (Shift+F3)">
                <TextBlock Text="⬆" FontSize="12" />
            </Button>
            
            <Separator />
            
            <!-- View Options -->
            <CheckBox IsChecked="{Binding ShowSchemaNodes}" 
                      Content="Schema Nodes" 
                      VerticalAlignment="Center" 
                      ToolTip="Show schema-only nodes that can be added" />
            <CheckBox IsChecked="{Binding ShowOnlyInvalidNodes}" 
                      Content="Invalid Only" 
                      VerticalAlignment="Center" 
                      ToolTip="Show only nodes with validation errors" />
        </ToolBar>

        <!-- Main DataGrid -->
        <DataGrid Grid.Row="2" 
                  x:Name="MainDataGrid"
                  ItemsSource="{Binding FlatItemsSource}"
                  SelectedItem="{Binding SelectedGridItem, Mode=TwoWay}"
                  AutoGenerateColumns="False"
                  CanUserSortColumns="False"
                  GridLinesVisibility="Horizontal"
                  HeadersVisibility="Column"
                  RowHeaderWidth="0"
                  SelectionMode="Extended"
                  SelectionUnit="FullRow"
                  EnableRowVirtualization="True"
                  EnableColumnVirtualization="True"
                  VirtualizingPanel.VirtualizationMode="Recycling"
                  ScrollViewer.CanContentScroll="True"
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto">
            
            <!-- Row Style Selector -->
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu DataContext="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                <MenuItem Header="Delete"
                                          Command="{Binding Path=ParentViewModel.DeleteSelectedNodesCommand}" 
                                          CommandParameter="{Binding}"/>
                                <Separator />
                                <MenuItem Header="Expand Recursive"
                                          Command="{Binding Path=ParentViewModel.ExpandSelectedRecursiveCommand}"
                                          CommandParameter="{Binding}" />
                                <MenuItem Header="Collapse Recursive"
                                          Command="{Binding Path=ParentViewModel.CollapseSelectedRecursiveCommand}"
                                          CommandParameter="{Binding}" />
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <!-- Schema-only nodes (grayed out) -->
                        <DataTrigger Binding="{Binding IsSchemaOnlyNode}" Value="True">
                            <Setter Property="Foreground" Value="Gray" />
                            <Setter Property="FontStyle" Value="Italic" />
                        </DataTrigger>
                        
                        <!-- Unschematized nodes (dark blue) -->
                        <DataTrigger Binding="{Binding IsUnschematized}" Value="True">
                            <Setter Property="Foreground" Value="DarkBlue" />
                        </DataTrigger>
                        
                        <!-- External/missing ref nodes (dark magenta) -->
                        <DataTrigger Binding="{Binding IsRefLinkToExternalOrMissing}" Value="True">
                            <Setter Property="Foreground" Value="DarkMagenta" />
                        </DataTrigger>
                        
                        <!-- Validation error nodes (red border and salmon background) -->
                        <DataTrigger Binding="{Binding IsValid}" Value="False">
                            <Setter Property="BorderBrush" Value="Red" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="Background" Value="Salmon" />
                        </DataTrigger>
                        
                        <!-- Search highlighted nodes -->
                        <DataTrigger Binding="{Binding IsHighlightedInSearch}" Value="True">
                            <Setter Property="Background" Value="Yellow" />
                        </DataTrigger>
                        
                        <!-- Read-only nodes -->
                        <DataTrigger Binding="{Binding IsNodeReadOnly}" Value="True">
                            <Setter Property="Background" Value="LightGray" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>
                <!-- Expandable Node Name Column -->
                <DataGridTemplateColumn Header="Name" Width="300" CanUserResize="True">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <EventSetter Event="MouseDoubleClick" Handler="NameCell_MouseDoubleClick" />
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid Margin="{Binding Indentation}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                
                                <!-- Expand/Collapse Button -->
                                <ToggleButton Grid.Column="0" 
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay}"
                                              Click="ExpandToggleButton_Click"
                                              Visibility="{Binding IsExpandable, Converter={StaticResource BooleanToVisibilityConverter}}"
                                              Width="16" Height="16" 
                                              Margin="0,0,4,0"
                                              Style="{StaticResource ExpandCollapseToggleStyle}" />
                                
                                <!-- Node Name -->
                                <TextBlock Grid.Column="1" 
                                           Text="{Binding NodeName}" 
                                           VerticalAlignment="Center"
                                           ToolTip="{Binding ValidationErrorMessage}" />
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- Value Column -->
                <DataGridTemplateColumn Header="Value" Width="*" CanUserResize="True">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <EventSetter Event="MouseDoubleClick" Handler="ValueCell_MouseDoubleClick" />
                            <Setter Property="ToolTip">
                                <Setter.Value>
                                    <ToolTip DataContext="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                        <ToolTip.Content>
                                            <MultiBinding Converter="{StaticResource CustomTooltipConverter}">
                                                <Binding Path="." />
                                                <Binding Path="ParentViewModel.UiRegistry" />
                                            </MultiBinding>
                                        </ToolTip.Content>
                                    </ToolTip>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplateSelector>
                        <StaticResource ResourceKey="NodeValueTemplateSelector" />
                    </DataGridTemplateColumn.CellTemplateSelector>
                    <DataGridTemplateColumn.CellEditingTemplateSelector>
                        <StaticResource ResourceKey="NodeValueTemplateSelector" />
                    </DataGridTemplateColumn.CellEditingTemplateSelector>
                </DataGridTemplateColumn>

                <!-- Type Column -->
                <DataGridTextColumn Header="Type" 
                                    Binding="{Binding SchemaContextNode.ClrType.Name}" 
                                    Width="100" 
                                    IsReadOnly="True" />

                <!-- Path Column -->
                <DataGridTextColumn Header="Path" 
                                    Binding="{Binding DomNode.Path}" 
                                    Width="200" 
                                    IsReadOnly="True" />
            </DataGrid.Columns>
        </DataGrid>

        <!-- Status Bar -->
        <StatusBar Grid.Row="3">
            <StatusBarItem>
                <TextBlock Text="{Binding FlatItemsSource.Count, StringFormat='Items: {0}'}" />
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <TextBlock Text="{Binding CurrentFilePath, StringFormat='File: {0}', TargetNullValue='No file loaded'}" />
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <TextBlock Text="{Binding IsDirty, StringFormat='Modified: {0}'}" />
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <TextBlock Text="{Binding SearchStatusText}" />
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window> 