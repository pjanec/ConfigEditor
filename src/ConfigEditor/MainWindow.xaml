<Window x:Class="JsonConfigEditor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:JsonConfigEditor.ViewModels"
        xmlns:views="clr-namespace:JsonConfigEditor.Views"
        xmlns:converters="clr-namespace:JsonConfigEditor.Wpf.Converters"
        xmlns:ap="clr-namespace:JsonConfigEditor.Wpf.AttachedProperties"
        xmlns:local="clr-namespace:JsonConfigEditor"
        Title="{Binding WindowTitle}" 
        Height="600" Width="1000"
        WindowStartupLocation="CenterScreen">
    
    <Window.DataContext>
        <vm:MainViewModel />
    </Window.DataContext>
    
    <Window.InputBindings>
        <!-- Keyboard shortcuts -->
        <KeyBinding Key="O" Modifiers="Ctrl" Command="{Binding OpenFileCommand}" />
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding SaveFileCommand}" />
        <KeyBinding Key="N" Modifiers="Ctrl" Command="{Binding NewFileCommand}" />
        <KeyBinding Key="F" Modifiers="Ctrl" Command="{Binding FocusSearchCommand}" />
        <KeyBinding Key="F3" Command="{Binding FindNextCommand}" />
        <KeyBinding Key="F3" Modifiers="Shift" Command="{Binding FindPreviousCommand}" />
        <KeyBinding Key="Delete" Command="{Binding DeleteSelectedNodesCommand}" CommandParameter="{Binding SelectedGridItem}"/>
        <KeyBinding Key="Insert" Command="{Binding AddNewSiblingNodeCommand}" CommandParameter="{Binding SelectedGridItem}"/>
        <KeyBinding Key="Insert" Modifiers="Alt" Command="{Binding AddNewChildNodeCommand}" CommandParameter="{Binding SelectedGridItem}"/>
        <KeyBinding Key="Z" Modifiers="Ctrl" Command="{Binding UndoCommand}" />
        <KeyBinding Key="Y" Modifiers="Ctrl" Command="{Binding RedoCommand}" />
    </Window.InputBindings>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Wpf/Resources/ModalEditors.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <converters:CustomTooltipConverter x:Key="CustomTooltipConverter" />
            <converters:BooleanToStringConverter x:Key="BooleanToStringConverter" />
            <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
            <converters:IsObjectTypeConverter x:Key="IsObjectTypeConverter" />

            <DataTemplate x:Key="DisplayStringTemplate">
                <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayNumberTemplate">
                <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" HorizontalAlignment="Left" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayBooleanTemplate">
                <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" HorizontalAlignment="Left" />
            </DataTemplate>
            
            <DataTemplate x:Key="DisplayEnumTemplate">
                 <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayRefTemplate">
                 <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" FontStyle="Italic" Foreground="Blue" />
            </DataTemplate>

            <DataTemplate x:Key="DisplayAddItemTemplate">
                 <TextBlock Text="{Binding NodeName}" VerticalAlignment="Center" Margin="2,0" FontStyle="Italic" Foreground="Gray" />
            </DataTemplate>
            
            <DataTemplate x:Key="DisplaySchemaOnlyTemplate">
                 <TextBlock Text="{Binding ValueDisplay}" VerticalAlignment="Center" Margin="2,0" FontStyle="Italic" Foreground="DarkGray" />
            </DataTemplate>

            <DataTemplate x:Key="EditStringTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditNumberTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" HorizontalAlignment="Left" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditBooleanTemplate">
                <CheckBox IsChecked="{Binding EditValue, Converter={StaticResource BooleanToStringConverter}, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" HorizontalAlignment="Left"
                          ap:FocusAndSelect.IsEnabled="True"/>
            </DataTemplate>

            <DataTemplate x:Key="EditEnumTemplate">
                <ComboBox ItemsSource="{Binding AllowedValues}" 
                SelectedItem="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" 
                IsEditable="False" VerticalAlignment="Center"/>
            </DataTemplate>
            
            <DataTemplate x:Key="EditRefTemplate">
                 <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                          ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditAddItemTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>

            <DataTemplate x:Key="EditSchemaOnlyTemplate">
                <TextBox Text="{Binding EditValue, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                         ap:FocusAndSelect.IsEnabled="True" />
            </DataTemplate>
            
            <views:NodeValueTemplateSelector x:Key="NodeValueTemplateSelector" 
                ModalEditorButtonTemplate="{StaticResource ModalEditorButtonTemplate}"
                DisplayStringTemplate="{StaticResource DisplayStringTemplate}"
                DisplayNumberTemplate="{StaticResource DisplayNumberTemplate}"
                DisplayBooleanTemplate="{StaticResource DisplayBooleanTemplate}"
                DisplayEnumTemplate="{StaticResource DisplayEnumTemplate}"
                DisplayRefTemplate="{StaticResource DisplayRefTemplate}"
                DisplayAddItemTemplate="{StaticResource DisplayAddItemTemplate}"
                DisplaySchemaOnlyTemplate="{StaticResource DisplaySchemaOnlyTemplate}"
                EditStringTemplate="{StaticResource EditStringTemplate}"
                EditNumberTemplate="{StaticResource EditNumberTemplate}"
                EditBooleanTemplate="{StaticResource EditBooleanTemplate}"
                EditEnumTemplate="{StaticResource EditEnumTemplate}"
                EditRefTemplate="{StaticResource EditRefTemplate}"
                EditAddItemTemplate="{StaticResource EditAddItemTemplate}"
                EditSchemaOnlyTemplate="{StaticResource EditSchemaOnlyTemplate}" />
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <!-- MODIFICATION START: Add rows for splitter and panel -->
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />   
            <!-- MODIFICATION END -->
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Menu Bar -->
        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_New" Command="{Binding NewFileCommand}" InputGestureText="Ctrl+N" />
                <MenuItem Header="_Open..." Command="{Binding OpenFileCommand}" InputGestureText="Ctrl+O" />
                <MenuItem Header="Open _Cascade Project..." Command="{Binding LoadCascadeProjectCommand}" />
                <Separator />
                <MenuItem Header="_Save" Command="{Binding SaveFileCommand}" InputGestureText="Ctrl+S" />
                <MenuItem Header="Save _As..." Command="{Binding SaveAsFileCommand}" />
                <Separator />
                <MenuItem Header="E_xit" Command="{Binding ExitCommand}" />
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Undo" Command="{Binding UndoCommand}" InputGestureText="Ctrl+Z" />
                <MenuItem Header="_Redo" Command="{Binding RedoCommand}" InputGestureText="Ctrl+Y" />
                <Separator />
                <MenuItem Header="_Find" Command="{Binding FocusSearchCommand}" InputGestureText="Ctrl+F" />
                <MenuItem Header="Find _Next" Command="{Binding FindNextCommand}" InputGestureText="F3" />
                <MenuItem Header="Find _Previous" Command="{Binding FindPreviousCommand}" InputGestureText="Shift+F3" />
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="Show _Schema Nodes" IsCheckable="True" IsChecked="{Binding ShowSchemaNodes}" />
                <MenuItem Header="Show Only _Invalid Nodes" IsCheckable="True" IsChecked="{Binding ShowOnlyInvalidNodes}" />
                <MenuItem Header="Show Final _Merged View" IsCheckable="True" IsChecked="{Binding IsMergedViewActive, Mode=OneWay}" Command="{Binding ToggleMergedViewCommand}" />
                <Separator />
                <MenuItem Header="Show _Diagnostics Panel" IsCheckable="True" IsChecked="{Binding IsDiagnosticsPanelVisible, Mode=OneWay}" Command="{Binding ToggleDiagnosticsPanelCommand}" />
            </MenuItem>
            <MenuItem Header="_Schema">
                <MenuItem Header="_Load Schema Assembly..." Command="{Binding LoadSchemaCommand}" />
            </MenuItem>
            <!-- MODIFICATION START -->
            <MenuItem Header="_Tools">
                <MenuItem Header="_Run Integrity Checks..." Command="{Binding RunIntegrityCheckCommand}" />
                <MenuItem Header="_Check Project Structure..." Command="{Binding CheckProjectStructureCommand}" />
            </MenuItem>
            <!-- MODIFICATION END -->
        </Menu>

        <!-- Toolbar -->
        <ToolBar Grid.Row="1">
            <Button Command="{Binding NewFileCommand}" ToolTip="New (Ctrl+N)">
                <TextBlock Text="📄" FontSize="16" />
            </Button>
            <Button Command="{Binding OpenFileCommand}" ToolTip="Open (Ctrl+O)">
                <TextBlock Text="📂" FontSize="16" />
            </Button>
            <Button Command="{Binding LoadCascadeProjectCommand}" ToolTip="Open Cascade Project">
                <TextBlock Text="🗂️" FontSize="16" />
            </Button>
            <Button Command="{Binding SaveFileCommand}" ToolTip="Save (Ctrl+S)">
                <TextBlock Text="💾" FontSize="16" />
            </Button>
            <Separator />
            <Button Command="{Binding UndoCommand}" ToolTip="Undo (Ctrl+Z)">
                <TextBlock Text="↶" FontSize="16" />
            </Button>
            <Button Command="{Binding RedoCommand}" ToolTip="Redo (Ctrl+Y)">
                <TextBlock Text="↷" FontSize="16" />
            </Button>
            <Separator />
            
            <!-- Filter Controls -->
            <TextBlock Text="Filter:" VerticalAlignment="Center" Margin="5,0" />
            <TextBox Text="{Binding FilterText, UpdateSourceTrigger=PropertyChanged}" 
                     Width="150" ToolTip="Filter nodes by name" />
            <Button Command="{Binding ClearFilterCommand}" 
                    IsEnabled="{Binding CanClearFilter}"
                    ToolTip="Clear filter">
                <TextBlock Text="❌" Foreground="Red" FontWeight="Bold" />
            </Button>
            
            <Separator />
            
            <!-- Search Controls -->
            <TextBlock Text="Search:" VerticalAlignment="Center" Margin="5,0" />
            <TextBox x:Name="SearchTextBox" 
                     Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" 
                     Width="150" ToolTip="Search nodes (Ctrl+F)" />
            <Button Command="{Binding FindNextCommand}" ToolTip="Find Next (F3)">
                <TextBlock Text="⬇" FontSize="12" />
            </Button>
            <Button Command="{Binding FindPreviousCommand}" ToolTip="Find Previous (Shift+F3)">
                <TextBlock Text="⬆" FontSize="12" />
            </Button>
            
            <Separator />
            
            <!-- NEW: Cascade Controls -->
            <StackPanel Orientation="Horizontal" 
                        Visibility="{Binding IsCascadeModeActive, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock Text="Layer:" VerticalAlignment="Center" Margin="5,0" FontWeight="Bold" />
                <ComboBox ItemsSource="{Binding AllLayers}"
                          SelectedItem="{Binding ActiveEditorLayer, Mode=TwoWay}"
                          DisplayMemberPath="Name"
                          Width="120"
                          VerticalContentAlignment="Center"
                          ToolTip="Select the active layer for editing."/>

                <Button Command="{Binding ToggleMergedViewCommand}"
                        ToolTip="Toggle between viewing the final merged configuration and only the selected layer's overrides"
                        Margin="10,0,0,0">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMergedViewActive}" Value="True">
                                    <Setter Property="Background" Value="LightBlue" />
                                    <Setter Property="BorderBrush" Value="Blue" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <TextBlock Text="🔗" FontSize="14" />
                </Button>
            </StackPanel>
            
            <Separator />
            
            <!-- View Options -->
            <Button Command="{Binding ToggleSchemaNodesCommand}"
                    ToolTip="Show schema-only nodes that can be added">
                <Button.Style>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ShowSchemaNodes}" Value="True">
                                <Setter Property="Background" Value="LightGreen" />
                                <Setter Property="BorderBrush" Value="Green" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                <TextBlock Text="📋" FontSize="14" />
            </Button>
            <Button Command="{Binding ToggleInvalidOnlyCommand}"
                    ToolTip="Show only nodes with validation errors">
                <Button.Style>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ShowOnlyInvalidNodes}" Value="True">
                                <Setter Property="Background" Value="LightCoral" />
                                <Setter Property="BorderBrush" Value="Red" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                <TextBlock Text="⚠️" FontSize="14" />
            </Button>
        </ToolBar>

        <!-- Main DataGrid -->
        <DataGrid Grid.Row="2" 
                  x:Name="MainDataGrid"
                  ItemsSource="{Binding FlatItemsSource}"
                  SelectedItem="{Binding SelectedGridItem, Mode=TwoWay}"
                  AutoGenerateColumns="False"
                  CanUserSortColumns="False"
                  GridLinesVisibility="Horizontal"
                  HeadersVisibility="Column"
                  RowHeaderWidth="0"
                  SelectionMode="Extended"
                  SelectionUnit="FullRow"
                  EnableRowVirtualization="True"
                  EnableColumnVirtualization="True"
                  VirtualizingPanel.VirtualizationMode="Recycling"
                  ScrollViewer.CanContentScroll="True"
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto">
            
            <!-- Row Style Selector -->
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <EventSetter Event="PreviewMouseRightButtonDown" Handler="DataGridRow_PreviewMouseRightButtonDown" />
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu DataContext="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                <MenuItem Header="Add Item Above" Command="{Binding Path=ParentViewModel.AddItemAboveCommand}" CommandParameter="{Binding}">
                                    <MenuItem.Style>
                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsInArray}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </MenuItem.Style>
                                </MenuItem>
                                <MenuItem Header="Add Item Below" Command="{Binding Path=ParentViewModel.AddItemBelowCommand}" CommandParameter="{Binding}">
                                    <MenuItem.Style>
                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsArrayContext}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </MenuItem.Style>
                                </MenuItem>

                                <MenuItem Header="Add New Sibling Node" Command="{Binding Path=ParentViewModel.AddNewSiblingNodeCommand}" CommandParameter="{Binding}" Visibility="{Binding IsArrayContext, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                                <MenuItem Header="Add New Child Node" Command="{Binding Path=ParentViewModel.AddNewChildNodeCommand}" CommandParameter="{Binding}">
                                    <MenuItem.Style>
                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsArrayContext}" Value="False"/>
                                                        <Condition Binding="{Binding DomNode, Converter={StaticResource IsObjectTypeConverter}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </MenuItem.Style>
                                </MenuItem>

                                <Separator/>
                                <MenuItem Header="Delete" Command="{Binding Path=ParentViewModel.DeleteSelectedNodesCommand}" CommandParameter="{Binding}"/>
                                <Separator />
                                <MenuItem Header="Override Sources" ItemsSource="{Binding OverrideSourceLayers}" Visibility="{Binding Path=ParentViewModel.IsCascadeModeActive, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <MenuItem.ItemContainerStyle>
                                        <Style TargetType="MenuItem">
                                            <Setter Property="Header" Value="{Binding LayerName}" />
                                            <Setter Property="Command" Value="{Binding SwitchToLayerCommand}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsDefinedInThisLayer}" Value="True">
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsCurrentlyActiveLayer}" Value="True">
                                                    <Setter Property="Icon">
                                                        <Setter.Value>
                                                            <TextBlock Text="✔" FontWeight="Bold" Margin="0,0,5,0" Foreground="DarkGreen" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </MenuItem.ItemContainerStyle>
                                </MenuItem>
                                <Separator Visibility="{Binding Path=ParentViewModel.IsCascadeModeActive, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <MenuItem Header="Expand Recursive" Command="{Binding Path=ParentViewModel.ExpandSelectedRecursiveCommand}" CommandParameter="{Binding}" />
                                <MenuItem Header="Collapse Recursive" Command="{Binding Path=ParentViewModel.CollapseSelectedRecursiveCommand}" CommandParameter="{Binding}" />
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsDefinedInActiveLayer}" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </DataTrigger>

                        <!-- Schema-only nodes (grayed out) -->
                        <DataTrigger Binding="{Binding IsSchemaOnlyNode}" Value="True">
                            <Setter Property="Foreground" Value="Gray" />
                            <Setter Property="FontStyle" Value="Italic" />
                        </DataTrigger>
                        
                        <!-- Unschematized nodes (dark blue) -->
                        <DataTrigger Binding="{Binding IsUnschematized}" Value="True">
                            <Setter Property="Foreground" Value="DarkBlue" />
                        </DataTrigger>
                        
                        <!-- External/missing ref nodes (dark magenta) -->
                        <DataTrigger Binding="{Binding IsRefLinkToExternalOrMissing}" Value="True">
                            <Setter Property="Foreground" Value="DarkMagenta" />
                        </DataTrigger>
                        
                        <!-- Validation error nodes (red border and salmon background) -->
                        <DataTrigger Binding="{Binding IsValid}" Value="False">
                            <Setter Property="BorderBrush" Value="Red" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="Background" Value="Salmon" />
                        </DataTrigger>
                        
                        <!-- Search highlighted nodes -->
                        <DataTrigger Binding="{Binding IsHighlightedInSearch}" Value="True">
                            <Setter Property="Background" Value="Yellow" />
                        </DataTrigger>
                        
                        <!-- Read-only nodes -->
                        <DataTrigger Binding="{Binding IsNodeReadOnly}" Value="True">
                            <Setter Property="Background" Value="LightGray" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>
                <!-- Expandable Node Name Column -->
                <DataGridTemplateColumn Header="Name" Width="300" CanUserResize="True">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ValueCell_PreviewMouseLeftButtonDown" />
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid Margin="{Binding Indentation}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <ToggleButton Grid.Column="0"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay}"
                                              Click="ExpandToggleButton_Click"
                                              Visibility="{Binding IsExpandable, Converter={StaticResource BooleanToVisibilityConverter}}"
                                              Width="16" Height="16"
                                              Margin="0,0,4,0"
                                              Style="{StaticResource ExpandCollapseToggleStyle}" />

                                <TextBlock Grid.Column="1" Text="{Binding NodeTypeIcon}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="14" Cursor="Hand">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="Icon_PreviewMouseLeftButtonDown"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding NodeType}" Value="Object">
                                                    <Setter Property="Foreground" Value="#FFC600"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding NodeType}" Value="Array">
                                                    <Setter Property="Foreground" Value="#3ADF00"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding NodeType}" Value="Value">
                                                    <Setter Property="Foreground" Value="Black"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsSchemaOnlyNode}" Value="True">
                                                    <Setter Property="Foreground" Value="LightGray"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <TextBlock Grid.Column="2"
                                           Text="{Binding NodeName}"
                                           VerticalAlignment="Center"
                                           ToolTip="{Binding ValidationErrorMessage}" />
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- Value Column -->
                <DataGridTemplateColumn Header="Value" Width="*" CanUserResize="True">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ValueCell_PreviewMouseLeftButtonDown" />
                            <Setter Property="ToolTip">
                                <Setter.Value>
                                    <ToolTip DataContext="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                        <ToolTip.Content>
                                            <MultiBinding Converter="{StaticResource CustomTooltipConverter}">
                                                <Binding Path="." />
                                                <Binding Path="ParentViewModel.UiRegistry" />
                                            </MultiBinding>
                                        </ToolTip.Content>
                                    </ToolTip>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplateSelector>
                        <StaticResource ResourceKey="NodeValueTemplateSelector" />
                    </DataGridTemplateColumn.CellTemplateSelector>
                    <DataGridTemplateColumn.CellEditingTemplateSelector>
                        <StaticResource ResourceKey="NodeValueTemplateSelector" />
                    </DataGridTemplateColumn.CellEditingTemplateSelector>
                </DataGridTemplateColumn>

                <!-- Origin Column -->
                <DataGridTemplateColumn Width="110">
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock Text="Origin" 
                                       Visibility="{Binding DataContext.IsMergedViewActive, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding OriginLayerName}" 
                                       VerticalAlignment="Center"
                                       ToolTip="The layer providing the final value for this property."
                                       Visibility="{Binding DataContext.IsMergedViewActive, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- Type Column -->
                <DataGridTextColumn Header="Type" 
                                    Binding="{Binding SchemaContextNode.ClrType.Name}" 
                                    Width="100" 
                                    IsReadOnly="True" />

                <!-- Origin File Column -->
                <DataGridTextColumn Header="Origin File"  
                                    Binding="{Binding OriginFilePath}"  
                                    Width="200"  
                                    IsReadOnly="True" />
            </DataGrid.Columns>
        </DataGrid>

        <!-- MODIFICATION START: Add GridSplitter and Diagnostics Panel -->
        <GridSplitter Grid.Row="3" 
                      Height="5" 
                      HorizontalAlignment="Stretch" 
                      VerticalAlignment="Center"
                      Background="LightGray"
                      ResizeDirection="Rows"
                      Visibility="{Binding IsDiagnosticsPanelVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>

        <Grid Grid.Row="4" 
              Visibility="{Binding IsDiagnosticsPanelVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
            <!-- TabControl: occupies the full space -->
            <TabControl x:Name="DiagnosticsPanel"
                        MaxHeight="250">
                <TabItem Header="Issues">
                    <ListView ItemsSource="{Binding Issues}">
                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem">
                                <!-- Use a DataTrigger to color-code rows based on severity -->
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Severity}" Value="Error">
                                        <Setter Property="Foreground" Value="#B00020" /> <!-- Darker red -->
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Severity}" Value="Warning">
                                        <Setter Property="Foreground" Value="#B36B00" /> <!-- Darker orange -->
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Severity}" Value="Info">
                                        <Setter Property="Foreground" Value="DarkGray" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ListView.ItemContainerStyle>
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Severity" Width="80" DisplayMemberBinding="{Binding Severity}" />
                                <GridViewColumn Header="Message" Width="450">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Message}"
                                                       TextTrimming="CharacterEllipsis"
                                                       ToolTip="{Binding Message}" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="Layer" Width="120" DisplayMemberBinding="{Binding LayerName}" />
                                <GridViewColumn Header="File" Width="200" DisplayMemberBinding="{Binding FilePath}" />
                                <GridViewColumn Header="Path" Width="300" DisplayMemberBinding="{Binding DomPath}" />
                            </GridView>
                        </ListView.View>
                    </ListView>
                </TabItem>

                <TabItem Header="Log">
                    <ListView ItemsSource="{Binding LogMessages}" FontFamily="Consolas" Margin="2"/>
                </TabItem>
            </TabControl>
            <!-- Close button: hovers on top of the TabControl, positioned absolutely -->
            <Button Command="{Binding ToggleDiagnosticsPanelCommand}"
                    Background="Transparent"
                    BorderThickness="0"
                    Width="22" Height="22"
                    Margin="0,2,4,0"
                    VerticalAlignment="Top"
                    HorizontalAlignment="Right"
                    Panel.ZIndex="1"
                    ToolTip="Close diagnostics panel">
                <Button.Content>
                    <TextBlock Text="✕" FontSize="12" />
                </Button.Content>
            </Button>
        </Grid>
        <!-- MODIFICATION END -->

        <!-- Status Bar -->
        <StatusBar Grid.Row="5">
            <StatusBarItem>
                <TextBlock Text="{Binding FlatItemsSource.Count, StringFormat='Items: {0}'}" />
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <TextBlock Text="{Binding IsDirty, StringFormat='Modified: {0}'}" />
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <TextBlock Text="{Binding SearchStatusText}" />
            </StatusBarItem>
            <!-- NEW: Critical Error Notification Area -->
            <StatusBarItem HorizontalAlignment="Right">
                <Border>
                    <Border.Style>
                        <Style TargetType="Border">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HasCriticalErrors}" Value="True" />
                                        <Condition Binding="{Binding ShowCriticalErrorNotification}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible" />
                                    <Setter Property="Background" Value="Red" />
                                    <Setter Property="Padding" Value="5,2"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="{Binding SearchStatusText}" Foreground="White" FontWeight="Bold" />
                        <Button Grid.Column="1" 
                                Command="{Binding DismissCriticalErrorCommand}"
                                Background="Transparent"
                                BorderThickness="0"
                                Foreground="White"
                                FontWeight="Bold"
                                FontSize="12"
                                Width="16" Height="16"
                                Margin="5,0,0,0"
                                ToolTip="Dismiss critical error notification">
                            <Button.Content>
                                <TextBlock Text="✕" />
                            </Button.Content>
                        </Button>
                    </Grid>
                </Border>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window> 